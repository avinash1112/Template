worker_processes auto;worker_processes auto;

worker_rlimit_nofile 65536;worker_rlimit_nofile 65536;

pid /tmp/nginx.pid;pid /tmp/nginx.pid;



events {events {

  worker_connections 4096;  worker_connections 4096;

}}



http {http {

  # MIME / defaults  # MIME / defaults

  include       mime.types;  include       mime.types;

  default_type  application/octet-stream;  default_type  application/octet-stream;

  types_hash_max_size 4096;  types_hash_max_size 4096;

  charset       utf-8;  charset       utf-8;



  # I/O  # I/O

  sendfile    on;  sendfile    on;

  tcp_nodelay on;  tcp_nodelay on;

  tcp_nopush  on;  tcp_nopush  on;



  # Conditional requests  # Conditional requests

  etag                on;  etag                on;

  if_modified_since   exact;  if_modified_since   exact;



  # Gzip – safe set  # Gzip – safe set

  gzip              on;  gzip              on;

  gzip_vary         on;  gzip_vary         on;

  gzip_comp_level   5;  gzip_comp_level   5;

  gzip_min_length   1024;  gzip_min_length   1024;

  gzip_proxied      any;  gzip_proxied      any;

  gzip_types  gzip_types

    text/plain text/css application/json application/javascript    text/plain text/css application/json application/javascript

    text/xml application/xml application/xml+rss image/svg+xml    text/xml application/xml application/xml+rss image/svg+xml

    application/font-woff application/font-woff2 font/ttf font/opentype;    application/font-woff application/font-woff2 font/ttf font/opentype;



  # Large headers  # Large headers

  large_client_header_buffers 8 16k;  large_client_header_buffers 8 16k;



  # Timeouts  # Timeouts

  client_header_timeout 15s;  client_header_timeout 15s;

  send_timeout          65s;  send_timeout          65s;

  keepalive_timeout     65s;  keepalive_timeout     65s;



  # Limits  # Limits

  client_body_buffer_size 256k;  client_body_buffer_size 256k;

  client_max_body_size    64m;  client_max_body_size    64m;



  # Temp paths (writable)  # Temp paths (writable)

  client_body_temp_path /tmp/client_temp;  client_body_temp_path /tmp/client_temp;

  proxy_temp_path       /tmp/proxy_temp;  proxy_temp_path       /tmp/proxy_temp;



  # Logs to stdout/stderr  # Logs to stdout/stderr

  log_format main '$remote_addr - $remote_user [$time_local] "$request" '  log_format main '$remote_addr - $remote_user [$time_local] "$request" '

                  '$status $body_bytes_sent "$http_referer" '                  '$status $body_bytes_sent "$http_referer" '

                  '"$http_user_agent" "$http_x_forwarded_for"';                  '"$http_user_agent" "$http_x_forwarded_for"';

  access_log /dev/stdout main;  access_log /dev/stdout main;

  error_log  /dev/stderr warn;  error_log  /dev/stderr warn;



  # Hide Nginx version  # Hide Nginx version

  server_tokens off;  server_tokens off;



  # HTTP server - redirect all to HTTPS (production only)  # HTTP server - redirect to HTTPS in production, serve directly in development

  server {  server {

    listen 80 default_server;    listen 80;

    listen [::]:80 default_server;    listen [::]:80;

    server_name _;    server_name _;



    # Health endpoints available on HTTP for load balancer checks    # In production, redirect HTTP to HTTPS

    include /etc/nginx/conf.d/health-endpoints.conf;    # In development, serve directly (proxy handles HTTPS)

    location / {

    # Redirect all other traffic to HTTPS      # Check if HTTPS is available (certs exist)

    location / {      if (-f /opt/nodejs/certs/server.crt) {

      return 301 https://$server_name$request_uri;        return 301 https://$server_name$request_uri;

    }      }

  }      

      # Development: serve directly

  # HTTPS server - main production server      root  /var/www/html;

  server {      index index.html;

    listen 443 ssl http2 default_server;      try_files $uri $uri/ /index.html;

    listen [::]:443 ssl http2 default_server;    }

    server_name _;

    # Health endpoints always available on HTTP

    # TLS configuration    include /etc/nginx/conf.d/health-endpoints.conf;

    ssl_certificate     /opt/nodejs/certs/server.crt;  }

    ssl_certificate_key /opt/nodejs/certs/server.key;

      # HTTPS server - production only

    # Modern TLS configuration  server {

    ssl_protocols TLSv1.2 TLSv1.3;    listen 443 ssl http2;

    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;    listen [::]:443 ssl http2;

    ssl_prefer_server_ciphers off;    server_name _;

    

    # SSL session configuration    # TLS configuration

    ssl_session_timeout 1d;    ssl_certificate     /opt/nodejs/certs/server.crt;

    ssl_session_cache shared:SSL:50m;    ssl_certificate_key /opt/nodejs/certs/server.key;

    ssl_session_tickets off;    

        # Modern TLS configuration

    # HSTS (HTTP Strict Transport Security)    ssl_protocols TLSv1.2 TLSv1.3;

    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

    ssl_prefer_server_ciphers off;

    # Static content root    

    root  /var/www/html;    # SSL session configuration

    index index.html;    ssl_session_timeout 1d;

    ssl_session_cache shared:SSL:50m;

    # Include health endpoints and location rules    ssl_session_tickets off;

    include /etc/nginx/conf.d/health-endpoints.conf;    

    include /etc/nginx/conf.d/location-rules.conf;    # HSTS (HTTP Strict Transport Security)

  }    add_header Strict-Transport-Security "max-age=63072000" always;

}
    root  /var/www/html;
    index index.html;

    # Security headers (safe defaults)
    add_header X-Content-Type-Options nosniff always;
    add_header X-Frame-Options SAMEORIGIN always;
    add_header Referrer-Policy strict-origin-when-cross-origin always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Don’t list directories
    autoindex off;

    # Symlink safety
    disable_symlinks if_not_owner from=/var/www/html;

    # Health probes and monitoring
    location __NGINX_CONFIG_PING_PATH__ {
      access_log off;
      add_header Content-Type text/plain;
      return 200 'OK';
    }
    
    location __NGINX_CONFIG_STUB_STATUS_PATH__ {
      stub_status;
      allow 127.0.0.1;
      allow ::1;
      deny all;
    }
    
    # Kubernetes health endpoints (from health-server.sh)
    location /health {
      access_log off;
      try_files /health/health.json =503;
      add_header Content-Type application/json;
    }
    
    location /ready {
      access_log off;
      try_files /health/ready.json =503;
      add_header Content-Type application/json;
    }
    
    # Additional Kubernetes aliases
    location /healthz { 
      access_log off;
      try_files /health/health.json =503;
      add_header Content-Type application/json;
    }
    
    location /readiness {
      access_log off; 
      try_files /health/ready.json =503;
      add_header Content-Type application/json;
    }
    
    # Instance information endpoint
    location /info {
      access_log off;
      alias /tmp/nodejs/runtime/instance_registration.json;
      add_header Content-Type application/json;
      # Only allow internal access for security
      allow 127.0.0.1;
      allow ::1;
      allow 10.0.0.0/8;
      allow 172.16.0.0/12;
      allow 192.168.0.0/16;
      deny all;
    }

    # Block hidden files and sensitive stuff
    location ~ /\.(?!well-known) { deny all; }

    # 1) Hashed JS/CSS emitted by Vite (filename.[hash].ext) → long, immutable cache
    location ~* ^/assets/.+\.[0-9a-f]{8,}\.(?:js|mjs|css)$ {
      access_log off;
      expires 1y;
      add_header Cache-Control "public, max-age=31536000, immutable";
      try_files $uri =404;
    }

    # 2) Fonts / images / media → medium cache
    location ~* \.(?:png|jpe?g|gif|webp|avif|ico|svg|woff2?|ttf|eot)$ {
      access_log off;
      expires 30d;
      add_header Cache-Control "public, max-age=2592000";
      try_files $uri =404;
    }

    # 3) Service worker & manifest must update promptly
    location = /service-worker.js {
      add_header Cache-Control "no-cache, no-store, must-revalidate";
      expires -1;
      try_files $uri =404;
    }
    location = /manifest.webmanifest {
      add_header Cache-Control "no-cache, no-store, must-revalidate";
      expires -1;
      try_files $uri =404;
    }

    # 4) HTML (including index.html) → no-cache
    location ~* \.html$ {
      add_header Cache-Control "no-cache, no-store, must-revalidate";
      expires -1;
      try_files $uri =404;
    }

    # Real files (assets) 404 correctly; unknown paths fall back to index.html
    location / {
      try_files $uri $uri/ /index.html;
    }

    # Include health endpoints and location rules
    include /etc/nginx/conf.d/health-endpoints.conf;
    include /etc/nginx/conf.d/location-rules.conf;

    # Methods: static sites typically only need GET/HEAD/OPTIONS
    if ($request_method !~ ^(GET|HEAD|OPTIONS)$) { return 405; }
  }
}
